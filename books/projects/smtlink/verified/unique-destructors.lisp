;; Copyright (C) 2015, University of British Columbia
;; Written by Yan Peng (Feb 22nd 2022)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2
;;

(in-package "SMT")
(include-book "std/util/bstar" :dir :system)
(include-book "std/util/define" :dir :system)

(include-book "hint-interface")

(define unique-destructor-destructor-list ((des-lst smt-function-list-p)
                                           (des-acc symbol-listp))
  :measure (len des-lst)
  :returns (des-lst symbol-listp)
  (b* ((des-lst (smt-function-list-fix des-lst))
       (des-acc (symbol-list-fix des-acc))
       ((unless (consp des-lst)) des-acc)
       ((cons des-hd des-tl) des-lst)
       ((smt-function df) des-hd))
    (unique-destructor-destructor-list des-tl (cons df.name des-acc))))

(define unique-destructor-sum ((sum smt-sum-p)
                               (cons-acc symbol-listp)
                               (des-acc symbol-listp))
  :returns (mv (cons-lst symbol-listp)
               (des-lst symbol-listp))
  (b* ((sum (smt-sum-fix sum))
       (cons-acc (symbol-list-fix cons-acc))
       (des-acc (symbol-list-fix des-acc))
       ((smt-sum s) sum)
       ((smt-function cf) s.constructor)
       (new-des (unique-destructor-destructor-list s.destructors des-acc)))
    (mv (cons cf.name cons-acc) new-des)))


(define unique-destructor-sum-list ((sums smt-sum-list-p)
                                    (cons-acc symbol-listp)
                                    (des-acc symbol-listp))
  :measure (len sums)
  :returns (mv (cons-lst symbol-listp)
               (des-lst symbol-listp))
  (b* ((sums (smt-sum-list-fix sums))
       (cons-acc (symbol-list-fix cons-acc))
       (des-acc (symbol-list-fix des-acc))
       ((unless (consp sums)) (mv cons-acc des-acc))
       ((cons s-hd s-tl) sums)
       ((mv cons-hd des-hd) (unique-destructor-sum s-hd cons-acc des-acc)))
    (unique-destructor-sum-list s-tl cons-hd des-hd)))

(define unique-destructor ((type smt-datatype-p))
  :returns (type maybe-smt-datatype-p)
  (b* ((type (smt-datatype-fix type))
       ((unless (equal (smt-datatype-kind type) :sumtype)) nil)
       (sums (smt-datatype-sumtype->sums type))
       ((mv & des-lst) (unique-destructor-sum-list sums nil nil))
       (okp (no-duplicatesp-equal des-lst)))
    (if okp nil type)))

(define unique-destructor-list ((types smt-datatype-list-p))
  :returns (type maybe-smt-datatype-p)
  :measure (len types)
  (b* ((types (smt-datatype-list-fix types))
       ((unless (consp types)) nil)
       ((cons type-hd type-tl) types)
       (not-unique? (unique-destructor type-hd))
       ((if not-unique?) not-unique?))
    (unique-destructor-list type-tl)))
