;; Copyright (C) 2015, University of British Columbia
;; Written by Yan Peng (Oct 26th 2021)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2
;;

(in-package "SMT")
(include-book "xdoc/top" :dir :system)
(include-book "centaur/fty/top" :dir :system)
(include-book "centaur/vl/util/defs" :dir :system)
(include-book "type-options")
(include-book "expand-options")

(defalist symbol-smt-datatype-alist
  :key-type symbolp
  :val-type smt-datatype-p
  :true-listp t)

(defprod hint-options
  ((supertype type-to-types-alist-p)
   (type-fn symbol-smt-function-alist-p)
   (datatype symbol-smt-datatype-alist-p)
   (function symbol-smt-function-alist-p)))

(define update-function ((type stringp)
                         (func smt-function-p))
  :returns (new-func smt-function-p)
  (b* ((type (vl::string-fix type))
       (func (smt-function-fix func))
       ((smt-function f) func)
       (new-trans-hint (change-trans-hint f.translation-hint :type type))
       (kind (if (equal f.kind :basic) :basic :type))
       (new-f (change-smt-function func
                                   :translation-hint new-trans-hint
                                   :kind kind)))
    new-f))

(define update-function-alst ((type stringp)
                              (func smt-function-p)
                              (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-func smt-function-p))
  (b* ((type (vl::string-fix type))
       (func (smt-function-fix func))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (name (smt-function->name func))
       (new-func (update-function type func)))
    (mv (acons name new-func fn-acc) new-func)))

(define update-function-alst-list ((type stringp)
                                   (func-lst smt-function-list-p)
                                   (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-func-lst smt-function-list-p))
  :measure (len func-lst)
  (b* ((type (vl::string-fix type))
       (func-lst (smt-function-list-fix func-lst))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((unless (consp func-lst)) (mv fn-acc nil))
       ((cons func-hd func-tl) func-lst)
       ((mv trans-1 new-hd)
        (update-function-alst type func-hd fn-acc))
       ((mv trans-2 new-tl)
        (update-function-alst-list type func-tl trans-1)))
    (mv trans-2 (cons new-hd new-tl))))

(define construct-datatype-basic-hint ((type smt-datatype-p)
                                       (fn-acc symbol-smt-function-alist-p)
                                       (type-acc symbol-smt-datatype-alist-p))
  :guard (equal (smt-datatype-kind type) :basic)
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (type-alst symbol-smt-datatype-alist-p))
  (b* ((type (smt-datatype-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (type-acc (symbol-smt-datatype-alist-fix type-acc))
       ((unless (mbt (equal (smt-datatype-kind type) :basic))) (mv nil nil))
       (rec (smt-datatype-basic->recognizer type))
       (name (smt-function->name rec))
       ((mv fn-1 new-rec) (update-function-alst "" rec fn-acc))
       (new-type (change-smt-datatype-basic type :recognizer new-rec)))
    (mv fn-1 (acons name new-type type-acc))))

(define construct-kind-hint ((kind maybe-smt-function-p)
                             (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-kind maybe-smt-function-p))
  (b* ((kind (maybe-smt-function-fix kind))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((unless kind) (mv fn-acc kind))
       ((smt-function k) kind))
    (mv (acons k.name k fn-acc) k)))

(define construct-sum-hint ((type stringp)
                            (sum smt-sum-p)
                            (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-sum smt-sum-p))
  (b* ((sum (smt-sum-fix sum))
       (type (vl::string-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((smt-sum ss) sum)
       ((mv fn-1 new-con)
        (update-function-alst type ss.constructor fn-acc))
       (sum-1 (change-smt-sum sum :constructor new-con))
       ((mv fn-2 new-des)
        (update-function-alst-list type ss.destructors fn-1))
       (sum-2 (change-smt-sum sum-1 :destructors new-des)))
    (mv fn-2 sum-2)))

(define construct-sum-list-hint ((type stringp)
                                 (sums smt-sum-list-p)
                                 (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-sums smt-sum-list-p))
  :measure (len sums)
  (b* ((sums (smt-sum-list-fix sums))
       (type (vl::string-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((unless (consp sums)) (mv fn-acc nil))
       ((cons sum-hd sum-tl) sums)
       ((mv fn-1 new-hd) (construct-sum-hint type sum-hd fn-acc))
       ((mv fn-2 new-tl) (construct-sum-list-hint type sum-tl fn-1)))
    (mv fn-2 (cons new-hd new-tl))))

(define construct-datatype-sumtype-hint ((type smt-datatype-p)
                                         (fn-acc symbol-smt-function-alist-p)
                                         (type-acc symbol-smt-datatype-alist-p))
  :guard (equal (smt-datatype-kind type) :sumtype)
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (type-alst symbol-smt-datatype-alist-p))
  (b* ((type (smt-datatype-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (type-acc (symbol-smt-datatype-alist-fix type-acc))
       ((unless (mbt (equal (smt-datatype-kind type) :sumtype))) (mv nil nil))
       (rec (smt-datatype-sumtype->recognizer type))
       (name (smt-function->name rec))
       (type-trans (trans-hint->translation (smt-function->translation-hint rec)))
       (kind (smt-datatype-sumtype->kind type))
       (sums (smt-datatype-sumtype->sums type))
       ((mv fn-1 new-rec) (update-function-alst "" rec fn-acc))
       (type-1 (change-smt-datatype-sumtype type :recognizer new-rec))
       ((mv fn-2 new-kind) (construct-kind-hint kind fn-1))
       (type-2 (change-smt-datatype-sumtype type-1 :kind new-kind))
       ((mv fn-3 new-sums) (construct-sum-list-hint type-trans sums fn-2))
       (type-3 (change-smt-datatype-sumtype type-2 :sums new-sums)))
    (mv fn-3 (acons name type-3 type-acc))))

(define construct-init-hint ((init init-p)
                             (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-init init-p))
  (b* ((init (init-fix init))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((init i) init)
       ((smt-function f) i.fn))
    (mv (acons f.name i.fn fn-acc) i)))

(define construct-store-hint ((store smt-function-p)
                              (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-store smt-function-p))
  (b* ((store (smt-function-fix store))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((smt-function s) store)
       (new-trans (make-trans-hint :translation "Store"))
       (new-func (change-smt-function s :translation-hint new-trans
                                      :kind :basic)))
    (mv (acons s.name new-func fn-acc)
        (change-smt-function s :translation-hint new-trans))))

(define construct-select-hint ((select smt-function-p)
                               (fn-acc symbol-smt-function-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (new-select smt-function-p))
  (b* ((select (smt-function-fix select))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       ((smt-function s) select)
       (new-trans (make-trans-hint :translation "Select"))
       (new-func (change-smt-function s :translation-hint new-trans
                                      ::kind :basic)))
    (mv (acons s.name new-func fn-acc)
        (change-smt-function s :translation-hint new-trans))))

(define construct-datatype-array-hint ((type smt-datatype-p)
                                       (fn-acc symbol-smt-function-alist-p)
                                       (type-acc symbol-smt-datatype-alist-p))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (type-alst symbol-smt-datatype-alist-p))
  (b* ((type (smt-datatype-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (type-acc (symbol-smt-datatype-alist-fix type-acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) (mv nil nil))
       (rec (smt-datatype-array->recognizer type))
       (name (smt-function->name rec))
       (init (smt-datatype-array->init type))
       (select (smt-datatype-array->select type))
       (store (smt-datatype-array->store type))
       ((mv fn-1 new-rec) (update-function-alst "" rec fn-acc))
       (type-1 (change-smt-datatype-array type :recognizer new-rec))
       ((mv fn-2 new-init) (construct-init-hint init fn-1))
       (type-2 (change-smt-datatype-array type-1 :init new-init))
       ((mv fn-3 new-store) (construct-store-hint store fn-2))
       (type-3 (change-smt-datatype-array type-2 :store new-store))
       ((mv fn-4 new-select) (construct-select-hint select fn-3))
       (type-4 (change-smt-datatype-array type-3 :select new-select)))
    (mv fn-4 (acons name type-4 type-acc))))

(define construct-datatype-hint ((type smt-datatype-p)
                                 (fn-acc symbol-smt-function-alist-p)
                                 (type-acc symbol-smt-datatype-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (type-alst symbol-smt-datatype-alist-p))
  (b* ((type (smt-datatype-fix type))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (type-acc (symbol-smt-datatype-alist-fix type-acc))
       ((if (equal (smt-datatype-kind type) :basic))
        (construct-datatype-basic-hint type fn-acc type-acc))
       ((if (equal (smt-datatype-kind type) :sumtype))
        (construct-datatype-sumtype-hint type fn-acc type-acc)))
    (construct-datatype-array-hint type fn-acc type-acc)))

(define construct-datatype-hint-alist ((types smt-datatype-list-p)
                                       (fn-acc symbol-smt-function-alist-p)
                                       (type-acc symbol-smt-datatype-alist-p))
  :returns (mv (fn-alst symbol-smt-function-alist-p)
               (type-alst symbol-smt-datatype-alist-p))
  :measure (len types)
  (b* ((types (smt-datatype-list-fix types))
       (fn-acc (symbol-smt-function-alist-fix fn-acc))
       (type-acc (symbol-smt-datatype-alist-fix type-acc))
       ((unless (consp types)) (mv fn-acc type-acc))
       ((cons t-hd t-tl) types)
       (rec (smt-function->name (smt-datatype->recognizer t-hd)))
       ((if (assoc-equal rec type-acc)) (mv fn-acc type-acc))
       ((mv fn-1 type-1) (construct-datatype-hint t-hd fn-acc type-acc)))
    (construct-datatype-hint-alist t-tl fn-1 type-1)))

(define construct-function-hint-alist ((functions smt-function-list-p)
                                       (acc symbol-smt-function-alist-p))
  :returns (type-alst symbol-smt-function-alist-p)
  :measure (len functions)
  (b* ((functions (smt-function-list-fix functions))
       (acc (symbol-smt-function-alist-fix acc))
       ((unless (consp functions)) acc)
       ((cons f-hd f-tl) functions)
       (fn (smt-function->name f-hd))
       ((if (assoc-equal fn acc))
        (construct-function-hint-alist f-tl acc)))
    (construct-function-hint-alist f-tl (acons fn f-hd acc))))

(define construct-hint-options ((smtlink-hint smtlink-hint-p))
  :returns (hint-options hint-options-p)
  (b* ((smtlink-hint (smtlink-hint-fix smtlink-hint))
       ((smtlink-hint h) smtlink-hint)
       ((mv & supertype) (construct-sub/supertype-alist h.acl2types))
       ((mv fn-alst type-alst)
        (construct-datatype-hint-alist h.datatypes nil nil))
       (func-alst (construct-function-hint-alist h.functions fn-alst)))
    (make-hint-options :supertype supertype
                       :datatype type-alst
                       :function func-alst)))
