;; Copyright (C) 2015, University of British Columbia
;; Written (originally) by Yan Peng (19th October, 2021)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2

(in-package "SMT")
(include-book "centaur/fty/top" :dir :system)
(include-book "xdoc/top" :dir :system)
(include-book "std/util/define" :dir :system)
(include-book "std/strings/top" :dir :system)

(include-book "../../utils/basics")
(include-book "../../utils/fresh-vars")
(include-book "../../verified/hint-interface")

;; Theory of arrays can be found at
;; http://smtlib.cs.uiowa.edu/theories-ArraysEx.shtml

(define array-select-init ((type smt-datatype-p)
                           (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (select (smt-datatype-array->select type))
       ((smt-function s) select)
       (the-nil (smt-datatype-array->init type))
       ((init i) the-nil)
       ((smt-function f) i.fn)
       ((if (or (equal s.name 'quote) (equal f.name 'quote)
                (equal i.val 'quote)))
        (er hard? 'array-property=>array-select-init
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-init))))
    (cons (list `(hint-please ',hint)
                `(equal (,s.name (,f.name) k) (,i.val))) acc)))

(define array-select-equal ((type smt-datatype-p)
                            (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function se) select)
       (store (smt-datatype-array->store type))
       ((smt-function st) store)
       ((if (or (equal se.name 'quote) (equal st.name 'quote)))
        (er hard? 'array-property=>array-select-equal
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-store))))
    (cons (list `(hint-please ',hint)
                `(if (if (,r.name ar)
                         (if (,key-type k) (,val-type v) 'nil)
                       'nil)
                     (equal (,se.name (,st.name ar k v) k) v)
                   't))
          acc)))

(define array-select-distinct ((type smt-datatype-p)
                               (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function se) select)
       (store (smt-datatype-array->store type))
       ((smt-function st) store)
       ((if (or (equal se.name 'quote) (equal st.name 'quote)))
        (er hard? 'array-property=>array-select-distinct
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-store))))
    (cons (list `(hint-please ',hint)
                `(if (if (,r.name ar)
                         (if (,key-type k1)
                             (if (,key-type k2)
                                 (if (,val-type v) (not (equal k1 k2)) 'nil)
                               'nil)
                           'nil)
                       'nil)
                     (equal (,se.name (,st.name ar k1 v) k2)
                            (,se.name ar k2))
                   't))
          acc)))

(define array-select-equal-witness ((type smt-datatype-p)
                                    (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (select (smt-datatype-array->select type))
       ((smt-function s) select)
       (equal-fn (smt-datatype-array->equal type))
       ((smt-function e) equal-fn)
       (equal-witness (smt-datatype-array->equal-witness type))
       ((smt-function w) equal-witness)
       ((if (or (equal r.name 'quote) (equal s.name 'quote)
                (equal e.name 'quote) (equal w.name 'quote)))
        (er hard? 'array-property=>array-select-equal-witness
            "Function name should not be 'quote.~%"))
       (hint1 `(:in-theory (enable symbol-integer-array-equal-implies-selects-equal)))
       (hint2 `(:in-theory (enable selects-of-witness-equal-implies-symbol-integer-array-equal))))
    `(,(list `(hint-please ',hint1)
             `(if (if (,r.name a1)
                      (if (,r.name a2)
                          (if (,key-type k) (,e.name a1 a2) 'nil)
                        'nil)
                    'nil)
	                (equal (,s.name a1 k) (,s.name a2 k))
                't))
      ,(list `(hint-please ',hint2)
             `(if (if (,r.name a1) (,r.name a2) 'nil)
                  (equal (,e.name a1 a2)
	                       (equal (,s.name a1 (,w.name a1 a2))
			                          (,s.name a2 (,w.name a1 a2))))
                't))
      ,@acc)))

(define array-property ((type smt-datatype-p)
                        (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (acc-1 (array-select-equal type acc))
       (acc-2 (array-select-distinct type acc-1)))
    (array-select-equal-witness type acc-2)))
