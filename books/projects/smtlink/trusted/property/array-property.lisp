;; Copyright (C) 2015, University of British Columbia
;; Written (originally) by Yan Peng (19th October, 2021)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2

(in-package "SMT")
(include-book "centaur/fty/top" :dir :system)
(include-book "xdoc/top" :dir :system)
(include-book "std/util/define" :dir :system)
(include-book "std/strings/top" :dir :system)

(include-book "../../utils/basics")
(include-book "../../utils/fresh-vars")
(include-book "../../verified/hint-interface")
(include-book "get-equal")
(include-book "recognizer-property")
(include-book "equality-property")

;; Theory of arrays can be found at
;; http://smtlib.cs.uiowa.edu/theories-ArraysEx.shtml

(define array-select-init ((type smt-datatype-p)
                           (types symbol-smt-datatype-alist-p)
                           (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (types (symbol-smt-datatype-alist-fix types))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function s) select)
       (the-nil (smt-datatype-array->init type))
       ((init i) the-nil)
       ((smt-function f) i.fn)
       (val-equal (get-equal-from-type-alist val-type types))
       ((if (or (equal s.name 'quote) (equal f.name 'quote)
                (equal i.val 'quote) (equal r.name 'quote)))
        (er hard? 'array-property=>array-select-init
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-init))))
    `(,(list `(,r.name (,f.name)))
      ,(list `(hint-please ',hint)
             `(,val-equal (,s.name (,f.name) k) (,i.val)))
      ,@acc)))

(define type-of-array-select ((type smt-datatype-p)
                              (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function se) select)
       ((if (or (equal se.name 'quote) (equal r.name 'quote)))
        (er hard? 'array-property=>array-select-equal
            "Function name should not be 'quote.~%")))
    (cons (list `(if (if (,r.name ar) (,key-type k) 'nil)
                     (,val-type (,se.name ar k))
                   't))
          acc)))

(define array-select-equal ((type smt-datatype-p)
                            (types symbol-smt-datatype-alist-p)
                            (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (types (symbol-smt-datatype-alist-fix types))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function se) select)
       (store (smt-datatype-array->store type))
       ((smt-function st) store)
       (equal (get-equal-from-type-alist val-type types))
       ((if (or (equal se.name 'quote) (equal st.name 'quote)))
        (er hard? 'array-property=>array-select-equal
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-store))))
    (cons (list `(hint-please ',hint)
                `(if (if (,r.name ar)
                         (if (,key-type k) (,val-type v) 'nil)
                       'nil)
                     (,equal (,se.name (,st.name ar k v) k) v)
                   't))
          acc)))

(define array-select-distinct ((type smt-datatype-p)
                               (types symbol-smt-datatype-alist-p)
                               (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (types (symbol-smt-datatype-alist-fix types))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (key-equal (get-equal-from-type-alist key-type types))
       (val-type (smt-datatype-array->val-type type))
       (val-equal (get-equal-from-type-alist val-type types))
       (select (smt-datatype-array->select type))
       ((smt-function se) select)
       (store (smt-datatype-array->store type))
       ((smt-function st) store)
       ((if (or (equal se.name 'quote) (equal st.name 'quote)))
        (er hard? 'array-property=>array-select-distinct
            "Function name should not be 'quote.~%"))
       (hint `(:in-theory (enable symbol-integer-array-select-of-symbol-integer-array-store))))
    (cons (list `(hint-please ',hint)
                `(if (if (,r.name ar)
                         (if (,key-type k1)
                             (if (,key-type k2)
                                 (if (,val-type v) (not (,key-equal k1 k2)) 'nil)
                               'nil)
                           'nil)
                       'nil)
                     (,val-equal (,se.name (,st.name ar k1 v) k2)
                                 (,se.name ar k2))
                   't))
          acc)))

(define type-of-array-store ((type smt-datatype-p)
                             (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (store (smt-datatype-array->store type))
       ((smt-function st) store)
       ((if (or (equal st.name 'quote) (equal r.name 'quote)))
        (er hard? 'array-property=>array-select-equal
            "Function name should not be 'quote.~%")))
    (cons (list `(if (if (,r.name ar)
                         (if (,key-type k) (,val-type v) 'nil)
                       'nil)
                     (,r.name (,st.name ar k v))
                   't))
          acc)))

(define array-select-equal-witness ((type smt-datatype-p)
                                    (types symbol-smt-datatype-alist-p)
                                    (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (types (symbol-smt-datatype-alist-fix types))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (rec (smt-datatype->recognizer type))
       ((smt-function r) rec)
       (key-type (smt-datatype-array->key-type type))
       (val-type (smt-datatype-array->val-type type))
       (select (smt-datatype-array->select type))
       ((smt-function s) select)
       (equal (get-equal-from-type type))
       (val-equal (get-equal-from-type-alist val-type types))
       (bool-equal (get-equal-from-type-alist 'booleanp types))
       (equal-witness (smt-datatype-array->equal-witness type))
       ((smt-function w) equal-witness)
       ((if (or (equal r.name 'quote) (equal s.name 'quote)
                (equal w.name 'quote)))
        (er hard? 'array-property=>array-select-equal-witness
            "Function name should not be 'quote.~%"))
       (hint1 `(:use ((:instance symbol-integer-array-equal-implies-selects-equal))))
       (hint2 `(:in-theory (enable selects-of-witness-equal-implies-symbol-integer-array-equal))))
    `(,(list `(hint-please ',hint1)
             `(if (if (,r.name a1)
                      (if (,r.name a2)
                          (if (,key-type k) (,equal a1 a2) 'nil)
                        'nil)
                    'nil)
	                (,val-equal (,s.name a1 k) (,s.name a2 k))
                't))
      ,(list `(hint-please ',hint2)
             `(if (if (,r.name a1) (,r.name a2) 'nil)
                  (,bool-equal (,equal a1 a2)
	                             (,val-equal (,s.name a1 (,w.name a1 a2))
			                                     (,s.name a2 (,w.name a1 a2))))
                't))
      ,@acc)))

(define array-property ((type smt-datatype-p)
                        (types symbol-smt-datatype-alist-p)
                        (acc pseudo-term-list-listp))
  :guard (equal (smt-datatype-kind type) :array)
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (types (symbol-smt-datatype-alist-fix types))
       (acc (pseudo-term-list-list-fix acc))
       ((unless (mbt (equal (smt-datatype-kind type) :array))) nil)
       (acc-1 (recognizer-property type acc))
       (acc-2 (array-select-init type types acc-1))
       (acc-3 (type-of-array-select type acc-2))
       (acc-4 (array-select-equal type types acc-3))
       (acc-5 (array-select-distinct type types acc-4))
       (acc-6 (type-of-array-store type acc-5))
       (acc-7 (array-select-equal-witness type types acc-6)))
    (equality-property type acc-7)))
