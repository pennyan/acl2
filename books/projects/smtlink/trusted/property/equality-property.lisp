;; Copyright (C) 2015, University of British Columbia
;; Written (originally) by Yan Peng (Feb 22nd 2022)
;;
;; License: A 3-clause BSD license.
;; See the LICENSE file distributed with ACL2

(in-package "SMT")
(include-book "centaur/fty/top" :dir :system)
(include-book "xdoc/top" :dir :system)
(include-book "std/util/define" :dir :system)
(include-book "std/strings/top" :dir :system)

(include-book "../../utils/basics")
(include-book "../../utils/fresh-vars")
(include-book "../../verified/property-name")

(define booleanp-of-equality ((rec smt-function-p)
                              (equal smt-function-p)
                              (prop-hints symbol-hints-alist-p))
  :returns (prop pseudo-term-listp)
  (b* ((rec (smt-function-fix rec))
       (equal (smt-function-fix equal))
       (prop-hints (symbol-hints-alist-fix prop-hints))
       ((smt-function r) rec)
       ((smt-function e) equal)
       ((if (or (equal r.name 'quote) (equal e.name 'quote)))
        (er hard? 'equality-property=>booleanp-of-equality
            "Function name should not be 'quote.~%"))
       (the-hint (get-hints r.name nil :type-of-equal prop-hints)))
    (list `(hint-please ',the-hint)
          `(if (if (,r.name x) (,r.name y) 'nil)
               (booleanp (,e.name x y))
             't))))

(define reflexivity-of-equality ((rec smt-function-p)
                                 (equal smt-function-p)
                                 (prop-hints symbol-hints-alist-p))
  :returns (prop pseudo-term-listp)
  (b* ((rec (smt-function-fix rec))
       (equal (smt-function-fix equal))
       (prop-hints (symbol-hints-alist-fix prop-hints))
       ((smt-function r) rec)
       ((smt-function e) equal)
       ((if (or (equal r.name 'quote) (equal e.name 'quote)))
        (er hard? 'equality-property=>booleanp-of-equality
            "Function name should not be 'quote.~%"))
       (the-hint (get-hints r.name nil :reflexivity-of-equal prop-hints)))
    (list `(hint-please ',the-hint)
          `(if (,r.name x) (,e.name x x) 't))))

(define symmetricity-of-equality ((rec smt-function-p)
                                  (equal smt-function-p)
                                  (prop-hints symbol-hints-alist-p))
  :returns (prop pseudo-term-listp)
  (b* ((rec (smt-function-fix rec))
       (equal (smt-function-fix equal))
       (prop-hints (symbol-hints-alist-fix prop-hints))
       ((smt-function r) rec)
       ((smt-function e) equal)
       ((if (or (equal r.name 'quote) (equal e.name 'quote)))
        (er hard? 'equality-property=>booleanp-of-equality
            "Function name should not be 'quote.~%"))
       (the-hint (get-hints r.name nil :symmetricity-of-equal prop-hints)))
    (list `(hint-please ',the-hint)
          `(if (if (,r.name x)
                   (if (,r.name y) (,e.name x y) 'nil)
                 'nil)
               (,e.name y x)
             't))))

(define transitivity-of-equality ((rec smt-function-p)
                                  (equal smt-function-p)
                                  (prop-hints symbol-hints-alist-p))
  :returns (prop pseudo-term-listp)
  (b* ((rec (smt-function-fix rec))
       (equal (smt-function-fix equal))
       (prop-hints (symbol-hints-alist-fix prop-hints))
       ((smt-function r) rec)
       ((smt-function e) equal)
       ((if (or (equal r.name 'quote) (equal e.name 'quote)))
        (er hard? 'equality-property=>booleanp-of-equality
            "Function name should not be 'quote.~%"))
       (the-hint (get-hints r.name nil :transitivity-of-equal prop-hints)))
    (list `(hint-please ',the-hint)
          `(if (if (,r.name x)
                   (if (,r.name y)
                       (if (,r.name z)
                           (if (,e.name x y) (,e.name y z) 'nil)
                         'nil)
                     'nil)
                 'nil)
               (,e.name x z)
             't))))

(define equality-property ((type smt-datatype-p)
                           (acc pseudo-term-list-listp))
  :returns (new-acc pseudo-term-list-listp)
  (b* ((type (smt-datatype-fix type))
       (acc (pseudo-term-list-list-fix acc))
       (rec (smt-datatype->recognizer type))
       (prop-hints (smt-datatype->property-hints type))
       (equal (smt-datatype->equal type))
       (prop1 (booleanp-of-equality rec equal prop-hints))
       (prop2 (reflexivity-of-equality rec equal prop-hints))
       (prop3 (symmetricity-of-equality rec equal prop-hints))
       (prop4 (transitivity-of-equality rec equal prop-hints)))
    `(,prop1 ,prop2 ,prop3 ,prop4 ,@acc)))
